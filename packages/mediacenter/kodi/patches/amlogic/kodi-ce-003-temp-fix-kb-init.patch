From f7753971a3363f780437f92fa3fa3cc3d7148c9f Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Thu, 26 Apr 2018 00:19:04 -0700
Subject: [PATCH 1/6] [linux] libinput: remove dependency on CWinEventsLinux

---
 xbmc/platform/linux/input/LibInputHandler.cpp  | 39 +++++++++++++++++---------
 xbmc/platform/linux/input/LibInputHandler.h    | 10 ++++---
 xbmc/platform/linux/input/LibInputKeyboard.cpp | 17 +++++++----
 xbmc/platform/linux/input/LibInputKeyboard.h   |  6 +---
 xbmc/platform/linux/input/LibInputPointer.cpp  | 17 +++++++----
 xbmc/platform/linux/input/LibInputPointer.h    |  6 +---
 6 files changed, 56 insertions(+), 39 deletions(-)

diff --git a/xbmc/platform/linux/input/LibInputHandler.cpp b/xbmc/platform/linux/input/LibInputHandler.cpp
index 68bd46ee0653..426aead6d444 100644
--- a/xbmc/platform/linux/input/LibInputHandler.cpp
+++ b/xbmc/platform/linux/input/LibInputHandler.cpp
@@ -73,7 +73,7 @@ static void LogHandler(libinput  __attribute__((unused)) *libinput, libinput_log
   }
 }
 
-CLibInputHandler::CLibInputHandler(CWinEventsLinux *winEvents)
+CLibInputHandler::CLibInputHandler() : CThread("libinput")
 {
   m_udev = udev_new();
   if (!m_udev)
@@ -98,31 +98,42 @@ CLibInputHandler::CLibInputHandler(CWinEventsLinux *winEvents)
 
   m_liFd = libinput_get_fd(m_li);
 
-  m_keyboard.reset(new CLibInputKeyboard(winEvents));
-  m_pointer.reset(new CLibInputPointer(winEvents));
+  m_keyboard.reset(new CLibInputKeyboard());
+  m_pointer.reset(new CLibInputPointer());
   m_touch.reset(new CLibInputTouch());
 }
 
 CLibInputHandler::~CLibInputHandler()
 {
+  StopThread();
+
   libinput_unref(m_li);
   udev_unref(m_udev);
 }
 
-void CLibInputHandler::OnReadyRead()
+void CLibInputHandler::Start()
 {
-  auto ret = libinput_dispatch(m_li);
-  if (ret < 0)
-  {
-    CLog::Log(LOGERROR, "CLibInputHandler::%s - libinput_dispatch failed: %s", __FUNCTION__, strerror(-errno));
-    return;
-  }
+  Create();
+  SetPriority(GetMinPriority());
+}
 
-  libinput_event *ev;
-  while ((ev = libinput_get_event(m_li)) != nullptr)
+void CLibInputHandler::Process()
+{
+  while (!m_bStop)
   {
-    ProcessEvent(ev);
-    libinput_event_destroy(ev);
+    auto ret = libinput_dispatch(m_li);
+    if (ret < 0)
+    {
+      CLog::Log(LOGERROR, "CLibInputHandler::%s - libinput_dispatch failed: %s", __FUNCTION__, strerror(-errno));
+      return;
+    }
+
+    libinput_event *ev;
+    while ((ev = libinput_get_event(m_li)) != nullptr)
+    {
+      ProcessEvent(ev);
+      libinput_event_destroy(ev);
+    }
   }
 }
 
diff --git a/xbmc/platform/linux/input/LibInputHandler.h b/xbmc/platform/linux/input/LibInputHandler.h
index 94fd517f0a82..a0e817ee8893 100644
--- a/xbmc/platform/linux/input/LibInputHandler.h
+++ b/xbmc/platform/linux/input/LibInputHandler.h
@@ -20,25 +20,27 @@
 
 #pragma once
 
+#include "threads/Thread.h"
+
 #include <libinput.h>
 #include <libudev.h>
 #include <memory>
 #include <vector>
 
-class CWinEventsLinux;
 class CLibInputKeyboard;
 class CLibInputPointer;
 class CLibInputTouch;
 
-class CLibInputHandler
+class CLibInputHandler : CThread
 {
 public:
-  CLibInputHandler(CWinEventsLinux *winEvents);
+  CLibInputHandler();
   ~CLibInputHandler();
 
-  void OnReadyRead();
+  void Start();
 
 private:
+  void Process() override;
   void ProcessEvent(libinput_event *ev);
   void DeviceAdded(libinput_device *dev);
   void DeviceRemoved(libinput_device *dev);
diff --git a/xbmc/platform/linux/input/LibInputKeyboard.cpp b/xbmc/platform/linux/input/LibInputKeyboard.cpp
index a82b5abfe2ba..717038f79386 100644
--- a/xbmc/platform/linux/input/LibInputKeyboard.cpp
+++ b/xbmc/platform/linux/input/LibInputKeyboard.cpp
@@ -20,8 +20,9 @@
 
 #include "LibInputKeyboard.h"
 
+#include "AppInboundProtocol.h"
+#include "ServiceBroker.h"
 #include "utils/log.h"
-#include "windowing/WinEventsLinux.h"
 
 #include <algorithm>
 #include <fcntl.h>
@@ -154,9 +155,8 @@ static const std::map<xkb_keysym_t, XBMCKey> xkbMap =
   // XBMCK_FASTFORWARD clashes with XBMCK_MEDIA_FASTFORWARD
 };
 
-CLibInputKeyboard::CLibInputKeyboard(CWinEventsLinux *winEvents)
-  : m_winEvents(winEvents)
-  , m_repeatTimer(std::bind(&CLibInputKeyboard::KeyRepeatTimeout, this))
+CLibInputKeyboard::CLibInputKeyboard()
+  : m_repeatTimer(std::bind(&CLibInputKeyboard::KeyRepeatTimeout, this))
 {
   m_ctx = xkb_context_new(XKB_CONTEXT_NO_FLAGS);
   if (!m_ctx)
@@ -271,7 +271,9 @@ void CLibInputKeyboard::ProcessKey(libinput_event_keyboard *e)
   event.key.keysym.scancode = scancode;
   event.key.keysym.unicode = unicode;
 
-  m_winEvents->MessagePush(&event);
+  std::shared_ptr<CAppInboundProtocol> appPort = CServiceBroker::GetAppPort();
+  if (appPort)
+    appPort->OnEvent(event);
 
   if (pressed && xkb_keymap_key_repeats(m_keymap, xkbkey))
   {
@@ -319,7 +321,10 @@ XBMCKey CLibInputKeyboard::XBMCKeyForKeysym(xkb_keysym_t sym, uint32_t scancode)
 void CLibInputKeyboard::KeyRepeatTimeout()
 {
   m_repeatTimer.RestartAsync(m_repeatRate);
-  m_winEvents->MessagePush(&m_repeatEvent);
+
+  std::shared_ptr<CAppInboundProtocol> appPort = CServiceBroker::GetAppPort();
+  if (appPort)
+    appPort->OnEvent(m_repeatEvent);
 }
 
 void CLibInputKeyboard::UpdateLeds(libinput_device *dev)
diff --git a/xbmc/platform/linux/input/LibInputKeyboard.h b/xbmc/platform/linux/input/LibInputKeyboard.h
index c52527f9eab9..3236b2f2164b 100644
--- a/xbmc/platform/linux/input/LibInputKeyboard.h
+++ b/xbmc/platform/linux/input/LibInputKeyboard.h
@@ -28,12 +28,10 @@
 #include <vector>
 #include <xkbcommon/xkbcommon.h>
 
-class CWinEventsLinux;
-
 class CLibInputKeyboard
 {
 public:
-  CLibInputKeyboard(CWinEventsLinux *winEvents);
+  CLibInputKeyboard();
   ~CLibInputKeyboard();
 
   void ProcessKey(libinput_event_keyboard *e);
@@ -52,8 +50,6 @@ class CLibInputKeyboard
 
   int m_leds;
 
-  CWinEventsLinux *m_winEvents;
-
   XBMC_Event m_repeatEvent;
   std::map<libinput_device*, std::vector<int>> m_repeatData;
   CTimer m_repeatTimer;
diff --git a/xbmc/platform/linux/input/LibInputPointer.cpp b/xbmc/platform/linux/input/LibInputPointer.cpp
index 5300e9f5fbcd..52d75bc48f22 100644
--- a/xbmc/platform/linux/input/LibInputPointer.cpp
+++ b/xbmc/platform/linux/input/LibInputPointer.cpp
@@ -20,11 +20,11 @@
 
 #include "LibInputPointer.h"
 
+#include "AppInboundProtocol.h"
 #include "input/mouse/MouseStat.h"
 #include "ServiceBroker.h"
 #include "utils/log.h"
 #include "windowing/GraphicContext.h"
-#include "windowing/WinEventsLinux.h"
 
 #include <algorithm>
 #include <linux/input.h>
@@ -76,7 +76,9 @@ void CLibInputPointer::ProcessButton(libinput_event_pointer *e)
   CLog::Log(LOGDEBUG, "CLibInputPointer::%s - event.button.x: %i", __FUNCTION__, event.button.x);
   CLog::Log(LOGDEBUG, "CLibInputPointer::%s - event.button.y: %i", __FUNCTION__, event.button.y);
 
-  m_winEvents->MessagePush(&event);
+  std::shared_ptr<CAppInboundProtocol> appPort = CServiceBroker::GetAppPort();
+  if (appPort)
+    appPort->OnEvent(event);
 }
 
 void CLibInputPointer::ProcessMotion(libinput_event_pointer *e)
@@ -106,7 +108,9 @@ void CLibInputPointer::ProcessMotion(libinput_event_pointer *e)
   CLog::Log(LOGDEBUG, "CLibInputPointer::%s - event.motion.x: %i", __FUNCTION__, event.motion.x);
   CLog::Log(LOGDEBUG, "CLibInputPointer::%s - event.motion.y: %i", __FUNCTION__, event.motion.y);
 
-  m_winEvents->MessagePush(&event);
+  std::shared_ptr<CAppInboundProtocol> appPort = CServiceBroker::GetAppPort();
+  if (appPort)
+    appPort->OnEvent(event);
 }
 
 void CLibInputPointer::ProcessAxis(libinput_event_pointer *e)
@@ -133,9 +137,12 @@ void CLibInputPointer::ProcessAxis(libinput_event_pointer *e)
   CLog::Log(LOGDEBUG, "CLibInputPointer::%s - event.button.x: %i", __FUNCTION__, event.button.x);
   CLog::Log(LOGDEBUG, "CLibInputPointer::%s - event.button.y: %i", __FUNCTION__, event.button.y);
 
-  m_winEvents->MessagePush(&event);
+  std::shared_ptr<CAppInboundProtocol> appPort = CServiceBroker::GetAppPort();
+  if (appPort)
+    appPort->OnEvent(event);
 
   event.type = XBMC_MOUSEBUTTONUP;
 
-  m_winEvents->MessagePush(&event);
+  if (appPort)
+    appPort->OnEvent(event);
 }
diff --git a/xbmc/platform/linux/input/LibInputPointer.h b/xbmc/platform/linux/input/LibInputPointer.h
index 3c4842e1f450..4c1b9fc69605 100644
--- a/xbmc/platform/linux/input/LibInputPointer.h
+++ b/xbmc/platform/linux/input/LibInputPointer.h
@@ -26,12 +26,10 @@ struct pos
   int Y;
 };
 
-class CWinEventsLinux;
-
 class CLibInputPointer
 {
 public:
-  CLibInputPointer(CWinEventsLinux *winEvents) { m_winEvents = winEvents; };
+  CLibInputPointer() = default;
   ~CLibInputPointer() = default;
 
   void ProcessButton(libinput_event_pointer *e);
@@ -40,6 +38,4 @@ class CLibInputPointer
 
 private:
   struct pos m_pos = { 0, 0 };
-
-  CWinEventsLinux *m_winEvents;
 };

From 1d65b0b3414eaaad08973c07e934b64b56e4e111 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Fri, 27 Apr 2018 22:27:54 -0700
Subject: [PATCH 2/6] windowing: remove CWinEventsLinux

---
 xbmc/windowing/CMakeLists.txt               |  5 ---
 xbmc/windowing/WinEventsLinux.cpp           | 47 -----------------------------
 xbmc/windowing/WinEventsLinux.h             | 41 -------------------------
 xbmc/windowing/amlogic/WinSystemAmlogic.cpp |  2 --
 xbmc/windowing/gbm/WinSystemGbm.cpp         |  2 --
 xbmc/windowing/rpi/WinSystemRpi.cpp         |  2 --
 6 files changed, 99 deletions(-)
 delete mode 100644 xbmc/windowing/WinEventsLinux.cpp
 delete mode 100644 xbmc/windowing/WinEventsLinux.h

diff --git a/xbmc/windowing/CMakeLists.txt b/xbmc/windowing/CMakeLists.txt
index a01d0280d264..1904e2c0ff38 100644
--- a/xbmc/windowing/CMakeLists.txt
+++ b/xbmc/windowing/CMakeLists.txt
@@ -11,11 +11,6 @@ set(HEADERS GraphicContext.h
             XBMC_events.h
             VideoSync.h)
 
-if(CORE_PLATFORM_NAME_LC STREQUAL rbpi OR CORE_PLATFORM_NAME_LC STREQUAL gbm OR CORE_PLATFORM_NAME_LC STREQUAL aml)
-  list(APPEND SOURCES WinEventsLinux.cpp)
-  list(APPEND HEADERS WinEventsLinux.h)
-endif()
-
 if(CORE_PLATFORM_NAME_LC STREQUAL rbpi)
   add_subdirectory(rpi)
 endif()
diff --git a/xbmc/windowing/WinEventsLinux.cpp b/xbmc/windowing/WinEventsLinux.cpp
deleted file mode 100644
index d3a247644351..000000000000
--- a/xbmc/windowing/WinEventsLinux.cpp
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- *      Copyright (C) 2005-2013 Team XBMC
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with XBMC; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "WinEventsLinux.h"
-#include "WinEvents.h"
-#include "XBMC_events.h"
-#include "input/XBMC_keysym.h"
-#include "AppInboundProtocol.h"
-#include "input/mouse/MouseStat.h"
-#include "utils/log.h"
-#include "ServiceBroker.h"
-
-CWinEventsLinux::CWinEventsLinux()
-  : m_libinput(new CLibInputHandler(this))
-{
-}
-
-bool CWinEventsLinux::MessagePump()
-{
-  m_libinput->OnReadyRead();
-
-  return true;
-}
-
-void CWinEventsLinux::MessagePush(XBMC_Event* ev)
-{
-  std::shared_ptr<CAppInboundProtocol> appPort = CServiceBroker::GetAppPort();
-  if (appPort)
-    appPort->OnEvent(*ev);
-}
diff --git a/xbmc/windowing/WinEventsLinux.h b/xbmc/windowing/WinEventsLinux.h
deleted file mode 100644
index 3ae5ef4b1081..000000000000
--- a/xbmc/windowing/WinEventsLinux.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- *      Copyright (C) 2005-2013 Team XBMC
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with XBMC; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#pragma once
-
-#include <memory>
-#include <mutex>
-#include <queue>
-
-#include "platform/linux/input/LibInputHandler.h"
-#include "windowing/WinEvents.h"
-
-class CWinEventsLinux : public IWinEvents
-{
-public:
-  CWinEventsLinux();
-
-  bool MessagePump();
-  void MessagePush(XBMC_Event *ev);
-
-private:
-
-  std::unique_ptr<CLibInputHandler> m_libinput;
-};
diff --git a/xbmc/windowing/amlogic/WinSystemAmlogic.cpp b/xbmc/windowing/amlogic/WinSystemAmlogic.cpp
index 1db2ba77c653..fdbf358867c8 100644
--- a/xbmc/windowing/amlogic/WinSystemAmlogic.cpp
+++ b/xbmc/windowing/amlogic/WinSystemAmlogic.cpp
@@ -42,7 +42,6 @@
 #include "utils/log.h"
 #include "utils/SysfsUtils.h"
 #include "threads/SingleLock.h"
-#include "../WinEventsLinux.h"
 
 #include <linux/fb.h>
 
@@ -75,7 +74,6 @@ CWinSystemAmlogic::CWinSystemAmlogic()
   aml_permissions();
   aml_disable_freeScale();
 
-  m_winEvents.reset(new CWinEventsLinux());
   // Register sink
   AE::CAESinkFactory::ClearSinks();
   CAESinkALSA::Register();
diff --git a/xbmc/windowing/gbm/WinSystemGbm.cpp b/xbmc/windowing/gbm/WinSystemGbm.cpp
index 45783bd9f170..eaf36eb08ec0 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbm.cpp
@@ -32,7 +32,6 @@
 #include "settings/DisplaySettings.h"
 #include "utils/log.h"
 #include "utils/StringUtils.h"
-#include "../WinEventsLinux.h"
 #include "DRMAtomic.h"
 #include "DRMLegacy.h"
 #include "messaging/ApplicationMessenger.h"
@@ -69,7 +68,6 @@ CWinSystemGbm::CWinSystemGbm() :
     }
   }
 
-  m_winEvents.reset(new CWinEventsLinux());
   CLinuxPowerSyscall::Register();
   m_lirc.reset(OPTIONALS::LircRegister());
 }
diff --git a/xbmc/windowing/rpi/WinSystemRpi.cpp b/xbmc/windowing/rpi/WinSystemRpi.cpp
index 82534f27c236..533c2b29762f 100644
--- a/xbmc/windowing/rpi/WinSystemRpi.cpp
+++ b/xbmc/windowing/rpi/WinSystemRpi.cpp
@@ -32,7 +32,6 @@
 #include "settings/DisplaySettings.h"
 #include "guilib/DispResource.h"
 #include "utils/log.h"
-#include "../WinEventsLinux.h"
 #include "cores/AudioEngine/AESinkFactory.h"
 #include "cores/AudioEngine/Sinks/AESinkPi.h"
 #include "platform/linux/powermanagement/LinuxPowerSyscall.h"
@@ -53,7 +52,6 @@ CWinSystemRpi::CWinSystemRpi()
 
   m_rpi = new CRPIUtils();
 
-  m_winEvents.reset(new CWinEventsLinux());
   AE::CAESinkFactory::ClearSinks();
   CAESinkPi::Register();
   CLinuxPowerSyscall::Register();

From cf9957017f3b384c34be85dde1c1fb5d8aa279ca Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Fri, 27 Apr 2018 22:40:37 -0700
Subject: [PATCH 3/6] windowing: add override for MessagePump

---
 xbmc/windowing/WinSystem.cpp                | 2 +-
 xbmc/windowing/WinSystem.h                  | 3 +++
 xbmc/windowing/X11/WinSystemX11.cpp         | 5 +++++
 xbmc/windowing/X11/WinSystemX11.h           | 3 +++
 xbmc/windowing/android/WinSystemAndroid.cpp | 5 +++++
 xbmc/windowing/android/WinSystemAndroid.h   | 3 +++
 xbmc/windowing/mir/WinSystemMir.cpp         | 5 +++++
 xbmc/windowing/mir/WinSystemMir.h           | 3 +++
 xbmc/windowing/osx/WinSystemIOS.h           | 3 +++
 xbmc/windowing/osx/WinSystemIOS.mm          | 5 +++++
 xbmc/windowing/osx/WinSystemOSX.h           | 3 +++
 xbmc/windowing/osx/WinSystemOSX.mm          | 5 +++++
 xbmc/windowing/wayland/WinSystemWayland.cpp | 5 +++++
 xbmc/windowing/wayland/WinSystemWayland.h   | 3 +++
 xbmc/windowing/win10/WinSystemWin10.cpp     | 5 +++++
 xbmc/windowing/win10/WinSystemWin10.h       | 3 +++
 xbmc/windowing/windows/WinSystemWin32.cpp   | 5 +++++
 xbmc/windowing/windows/WinSystemWin32.h     | 3 +++
 18 files changed, 68 insertions(+), 1 deletion(-)

diff --git a/xbmc/windowing/WinSystem.cpp b/xbmc/windowing/WinSystem.cpp
index 68eb218d438c..ccbe46b5ea5f 100644
--- a/xbmc/windowing/WinSystem.cpp
+++ b/xbmc/windowing/WinSystem.cpp
@@ -283,7 +283,7 @@ void CWinSystemBase::UnregisterRenderLoop(IRenderLoop *client)
 
 void CWinSystemBase::DriveRenderLoop()
 {
-  m_winEvents->MessagePump();
+  MessagePump();
 
   { CSingleLock lock(m_renderLoopSection);
     for (auto i = m_renderLoopClients.begin(); i != m_renderLoopClients.end(); ++i)
diff --git a/xbmc/windowing/WinSystem.h b/xbmc/windowing/WinSystem.h
index bfe99bc94218..14d57bfc493c 100644
--- a/xbmc/windowing/WinSystem.h
+++ b/xbmc/windowing/WinSystem.h
@@ -148,6 +148,9 @@ class CWinSystemBase
   void UnregisterRenderLoop(IRenderLoop *client);
   void DriveRenderLoop();
 
+  // winsystem events
+  virtual bool MessagePump() { return false; }
+
   // Access render system interface
   CGraphicContext& GetGfxContext();
 
diff --git a/xbmc/windowing/X11/WinSystemX11.cpp b/xbmc/windowing/X11/WinSystemX11.cpp
index b58e7b795760..fb1961355883 100644
--- a/xbmc/windowing/X11/WinSystemX11.cpp
+++ b/xbmc/windowing/X11/WinSystemX11.cpp
@@ -1056,3 +1056,8 @@ void CWinSystemX11::UpdateCrtc()
   m_crtc = g_xrandr.GetCrtc(posx+winattr.width/2, posy+winattr.height/2, fps);
   CServiceBroker::GetWinSystem()->GetGfxContext().SetFPS(fps);
 }
+
+bool CWinSystemX11::MessagePump()
+{
+  return m_winEvents->MessagePump();
+}
diff --git a/xbmc/windowing/X11/WinSystemX11.h b/xbmc/windowing/X11/WinSystemX11.h
index 19cb43a9e76a..73b9256b1fb8 100644
--- a/xbmc/windowing/X11/WinSystemX11.h
+++ b/xbmc/windowing/X11/WinSystemX11.h
@@ -72,6 +72,9 @@ class CWinSystemX11 : public CWinSystemBase
   void RecreateWindow();
   int GetCrtc() { return m_crtc; }
 
+  // winevents override
+  bool MessagePump() override;
+
 protected:
   std::unique_ptr<KODI::WINDOWING::IOSScreenSaver> GetOSScreenSaverImpl() override;
 
diff --git a/xbmc/windowing/android/WinSystemAndroid.cpp b/xbmc/windowing/android/WinSystemAndroid.cpp
index f6ec82b0b474..b9ee4aac8ef8 100644
--- a/xbmc/windowing/android/WinSystemAndroid.cpp
+++ b/xbmc/windowing/android/WinSystemAndroid.cpp
@@ -267,3 +267,8 @@ void CWinSystemAndroid::MessagePush(XBMC_Event *newEvent)
 {
   dynamic_cast<CWinEventsAndroid&>(*m_winEvents).MessagePush(newEvent);
 }
+
+bool CWinSystemAndroid::MessagePump()
+{
+  return m_winEvents->MessagePump();
+}
diff --git a/xbmc/windowing/android/WinSystemAndroid.h b/xbmc/windowing/android/WinSystemAndroid.h
index 524dfcbe88c7..a99a02655a9d 100644
--- a/xbmc/windowing/android/WinSystemAndroid.h
+++ b/xbmc/windowing/android/WinSystemAndroid.h
@@ -55,6 +55,9 @@ class CWinSystemAndroid : public CWinSystemBase
 
   void MessagePush(XBMC_Event *newEvent);
 
+    // winevents override
+  bool MessagePump() override;
+
 protected:
   CAndroidUtils *m_android;
 
diff --git a/xbmc/windowing/mir/WinSystemMir.cpp b/xbmc/windowing/mir/WinSystemMir.cpp
index c9c28e7975a2..47a64e5a3712 100644
--- a/xbmc/windowing/mir/WinSystemMir.cpp
+++ b/xbmc/windowing/mir/WinSystemMir.cpp
@@ -182,3 +182,8 @@ void CWinSystemMir::Register(IDispResource * /*resource*/)
 void CWinSystemMir::Unregister(IDispResource * /*resource*/)
 {
 }
+
+bool CWinSystemMir::MessagePump()
+{
+  return m_winEvents->MessagePump();
+}
diff --git a/xbmc/windowing/mir/WinSystemMir.h b/xbmc/windowing/mir/WinSystemMir.h
index 6347e4642c8d..5d1744921e11 100644
--- a/xbmc/windowing/mir/WinSystemMir.h
+++ b/xbmc/windowing/mir/WinSystemMir.h
@@ -53,6 +53,9 @@ class CWinSystemMir : public CWinSystemBase
   virtual void Register(IDispResource *resource);
   virtual void Unregister(IDispResource *resource);
 
+  // winevents override
+  bool MessagePump() override;
+
 protected:
   MirConnection* m_connection;
   MirWindow* m_window;
diff --git a/xbmc/windowing/osx/WinSystemIOS.h b/xbmc/windowing/osx/WinSystemIOS.h
index 70dc51574a89..345dbb012a7f 100644
--- a/xbmc/windowing/osx/WinSystemIOS.h
+++ b/xbmc/windowing/osx/WinSystemIOS.h
@@ -77,6 +77,9 @@ class CWinSystemIOS : public CWinSystemBase, public CRenderSystemGLES
   bool IsBackgrounded() const { return m_bIsBackgrounded; }
   void* GetEAGLContextObj();
 
+  // winevents override
+  bool MessagePump() override;
+
 protected:
   void PresentRenderImpl(bool rendered) override;
   void SetVSyncImpl(bool enable) override;
diff --git a/xbmc/windowing/osx/WinSystemIOS.mm b/xbmc/windowing/osx/WinSystemIOS.mm
index 5a23febd6194..0e24625c9e21 100644
--- a/xbmc/windowing/osx/WinSystemIOS.mm
+++ b/xbmc/windowing/osx/WinSystemIOS.mm
@@ -509,3 +509,8 @@ - (void) runDisplayLink
   std::unique_ptr<CVideoSync> pVSync(new CVideoSyncIos(clock, *this));
   return pVSync;
 }
+
+bool CWinSystemIOS::MessagePump()
+{
+  return m_winEvents->MessagePump();
+}
diff --git a/xbmc/windowing/osx/WinSystemOSX.h b/xbmc/windowing/osx/WinSystemOSX.h
index 7cdbbb85892d..01d579aea53f 100644
--- a/xbmc/windowing/osx/WinSystemOSX.h
+++ b/xbmc/windowing/osx/WinSystemOSX.h
@@ -80,6 +80,9 @@ class CWinSystemOSX : public CWinSystemBase, public ITimerCallback
   void* GetCGLContextObj();
   void* GetNSOpenGLContext();
 
+  // winevents override
+  bool MessagePump() override;
+
 protected:
   virtual std::unique_ptr<KODI::WINDOWING::IOSScreenSaver> GetOSScreenSaverImpl() override;
 
diff --git a/xbmc/windowing/osx/WinSystemOSX.mm b/xbmc/windowing/osx/WinSystemOSX.mm
index 2677c13ce3d0..3e3dcd9b6374 100644
--- a/xbmc/windowing/osx/WinSystemOSX.mm
+++ b/xbmc/windowing/osx/WinSystemOSX.mm
@@ -1880,3 +1880,8 @@ static void DisplayReconfigured(CGDirectDisplayID display,
   std::unique_ptr<CVideoSync> pVSync(new CVideoSyncOsx(clock));
   return pVSync;
 }
+
+bool CWinSystemOSX::MessagePump()
+{
+  return m_winEvents->MessagePump();
+}
diff --git a/xbmc/windowing/wayland/WinSystemWayland.cpp b/xbmc/windowing/wayland/WinSystemWayland.cpp
index 53e71c822e4b..b89142fd336d 100644
--- a/xbmc/windowing/wayland/WinSystemWayland.cpp
+++ b/xbmc/windowing/wayland/WinSystemWayland.cpp
@@ -1531,3 +1531,8 @@ void CWinSystemWayland::OnClose()
 {
   KODI::MESSAGING::CApplicationMessenger::GetInstance().PostMsg(TMSG_QUIT);
 }
+
+bool CWinSystemWayland::MessagePump()
+{
+  return m_winEvents->MessagePump();
+}
diff --git a/xbmc/windowing/wayland/WinSystemWayland.h b/xbmc/windowing/wayland/WinSystemWayland.h
index 786d8c722b30..19d361906c4b 100644
--- a/xbmc/windowing/wayland/WinSystemWayland.h
+++ b/xbmc/windowing/wayland/WinSystemWayland.h
@@ -101,6 +101,9 @@ class CWinSystemWayland : public CWinSystemBase, IInputHandler, IWindowDecoratio
   // Like CWinSystemX11
   void GetConnectedOutputs(std::vector<std::string>* outputs);
 
+  // winevents override
+  bool MessagePump() override;
+
 protected:
   std::unique_ptr<KODI::WINDOWING::IOSScreenSaver> GetOSScreenSaverImpl() override;
   CSizeInt GetBufferSize() const
diff --git a/xbmc/windowing/win10/WinSystemWin10.cpp b/xbmc/windowing/win10/WinSystemWin10.cpp
index e0884b449c6e..1843b2821461 100644
--- a/xbmc/windowing/win10/WinSystemWin10.cpp
+++ b/xbmc/windowing/win10/WinSystemWin10.cpp
@@ -755,4 +755,9 @@ WINDOW_STATE CWinSystemWin10::GetState(bool fullScreen) const
   return static_cast<WINDOW_STATE>(fullScreen ? m_fullscreenState : m_windowState);
 }
 
+bool CWinSystemWin10::MessagePump()
+{
+  return m_winEvents->MessagePump();
+}
+
 #pragma pack(pop)
diff --git a/xbmc/windowing/win10/WinSystemWin10.h b/xbmc/windowing/win10/WinSystemWin10.h
index b988e0c911df..d86cca34bd7b 100644
--- a/xbmc/windowing/win10/WinSystemWin10.h
+++ b/xbmc/windowing/win10/WinSystemWin10.h
@@ -125,6 +125,9 @@ class CWinSystemWin10 : public CWinSystemBase
 
   bool CanDoWindowed() override;
 
+  // winevents override
+  bool MessagePump() override;
+
 protected:
   bool CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) override = 0;
   virtual void UpdateStates(bool fullScreen);
diff --git a/xbmc/windowing/windows/WinSystemWin32.cpp b/xbmc/windowing/windows/WinSystemWin32.cpp
index d0ac082c84e2..771a815c3089 100644
--- a/xbmc/windowing/windows/WinSystemWin32.cpp
+++ b/xbmc/windowing/windows/WinSystemWin32.cpp
@@ -1170,3 +1170,8 @@ WINDOW_STATE CWinSystemWin32::GetState(bool fullScreen) const
 {
   return static_cast<WINDOW_STATE>(fullScreen ? m_fullscreenState : m_windowState);
 }
+
+bool CWinSystemWin32::MessagePump()
+{
+  return m_winEvents->MessagePump();
+}
diff --git a/xbmc/windowing/windows/WinSystemWin32.h b/xbmc/windowing/windows/WinSystemWin32.h
index 16ad8cb084fd..87e40470ecf2 100644
--- a/xbmc/windowing/windows/WinSystemWin32.h
+++ b/xbmc/windowing/windows/WinSystemWin32.h
@@ -218,6 +218,9 @@ class CWinSystemWin32 : public CWinSystemBase
   void SetSizeMoveMode(bool mode) { m_bSizeMoveEnabled = mode; }
   bool IsInSizeMoveMode() const { return m_bSizeMoveEnabled; }
 
+  // winevents override
+  bool MessagePump() override;
+
 protected:
   bool CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) override = 0;
   virtual void UpdateStates(bool fullScreen);

From 169ebd938f695df68bee1ce45f14677f129076aa Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Thu, 26 Apr 2018 00:20:14 -0700
Subject: [PATCH 4/6] [linux] windowing/gbm: register libinput

---
 xbmc/windowing/gbm/WinSystemGbm.cpp | 4 +++-
 xbmc/windowing/gbm/WinSystemGbm.h   | 2 ++
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/xbmc/windowing/gbm/WinSystemGbm.cpp b/xbmc/windowing/gbm/WinSystemGbm.cpp
index eaf36eb08ec0..3cd93fbb1d78 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbm.cpp
@@ -40,7 +40,8 @@
 CWinSystemGbm::CWinSystemGbm() :
   m_DRM(nullptr),
   m_GBM(new CGBMUtils),
-  m_delayDispReset(false)
+  m_delayDispReset(false),
+  m_libinput(new CLibInputHandler)
 {
   std::string envSink;
   if (getenv("AE_SINK"))
@@ -70,6 +71,7 @@ CWinSystemGbm::CWinSystemGbm() :
 
   CLinuxPowerSyscall::Register();
   m_lirc.reset(OPTIONALS::LircRegister());
+  m_libinput->Start();
 }
 
 bool CWinSystemGbm::InitWindowSystem()
diff --git a/xbmc/windowing/gbm/WinSystemGbm.h b/xbmc/windowing/gbm/WinSystemGbm.h
index 90771df278b4..ddfc083185b5 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.h
+++ b/xbmc/windowing/gbm/WinSystemGbm.h
@@ -23,6 +23,7 @@
 #include <gbm.h>
 #include <EGL/egl.h>
 
+#include "platform/linux/input/LibInputHandler.h"
 #include "platform/linux/OptionalsReg.h"
 #include "threads/CriticalSection.h"
 #include "windowing/WinSystem.h"
@@ -71,4 +72,5 @@ class CWinSystemGbm : public CWinSystemBase
   bool m_delayDispReset;
   XbmcThreads::EndTime m_dispResetTimer;
   std::unique_ptr<OPTIONALS::CLircContainer, OPTIONALS::delete_CLircContainer> m_lirc;
+  std::unique_ptr<CLibInputHandler> m_libinput;
 };

From dad0da51f83d3718478e2b554326de5547fcc472 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Fri, 27 Apr 2018 08:58:09 -0700
Subject: [PATCH 5/6] [linux] windowing/amlogic: register libinput

---
 xbmc/windowing/amlogic/WinSystemAmlogic.cpp | 4 +++-
 xbmc/windowing/amlogic/WinSystemAmlogic.h   | 3 +++
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/xbmc/windowing/amlogic/WinSystemAmlogic.cpp b/xbmc/windowing/amlogic/WinSystemAmlogic.cpp
index fdbf358867c8..7683ea76e172 100644
--- a/xbmc/windowing/amlogic/WinSystemAmlogic.cpp
+++ b/xbmc/windowing/amlogic/WinSystemAmlogic.cpp
@@ -51,7 +51,8 @@
 
 using namespace KODI;
 
-CWinSystemAmlogic::CWinSystemAmlogic()
+CWinSystemAmlogic::CWinSystemAmlogic() :
+  m_libinput(new CLibInputHandler)
 {
   const char *env_framebuffer = getenv("FRAMEBUFFER");
 
@@ -82,6 +83,7 @@
   CAESinkALSA::Register();
   CAESinkPULSE::Register();
   CLinuxPowerSyscall::Register();
+  m_libinput->Start();
 }
 
 CWinSystemAmlogic::~CWinSystemAmlogic()

diff --git a/xbmc/windowing/amlogic/WinSystemAmlogic.h b/xbmc/windowing/amlogic/WinSystemAmlogic.h
index cfe53d71075e..8e0bbe454787 100644
--- a/xbmc/windowing/amlogic/WinSystemAmlogic.h
+++ b/xbmc/windowing/amlogic/WinSystemAmlogic.h
@@ -20,6 +20,7 @@
 
 #pragma once
 
+#include "platform/linux/input/LibInputHandler.h"
 #include "platform/linux/OptionalsReg.h"
 #include "rendering/gles/RenderSystemGLES.h"
 #include "threads/CriticalSection.h"
@@ -64,5 +65,6 @@
 
   CCriticalSection m_resourceSection;
   std::vector<IDispResource*> m_resources;
+  std::unique_ptr<CLibInputHandler> m_libinput;
   std::unique_ptr<OPTIONALS::CLircContainer, OPTIONALS::delete_CLircContainer> m_lirc;
 };

From 0a755eed7cb98ef7fcda2750118e7d5dcc762564 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Fri, 27 Apr 2018 08:58:19 -0700
Subject: [PATCH 6/6] [linux] windowing/rpi: register libinput

---
 xbmc/windowing/rpi/WinSystemRpi.cpp | 4 +++-
 xbmc/windowing/rpi/WinSystemRpi.h   | 2 ++
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/xbmc/windowing/rpi/WinSystemRpi.cpp b/xbmc/windowing/rpi/WinSystemRpi.cpp
index 533c2b29762f..fac5cc49efa5 100644
--- a/xbmc/windowing/rpi/WinSystemRpi.cpp
+++ b/xbmc/windowing/rpi/WinSystemRpi.cpp
@@ -39,7 +39,8 @@
 #include <EGL/egl.h>
 #include <EGL/eglplatform.h>
 
-CWinSystemRpi::CWinSystemRpi()
+CWinSystemRpi::CWinSystemRpi() :
+  m_libinput(new CLibInputHandler)
 {
   m_nativeDisplay = EGL_NO_DISPLAY;
   m_nativeWindow = EGL_NO_SURFACE;
@@ -56,6 +57,7 @@ CWinSystemRpi::CWinSystemRpi()
   CAESinkPi::Register();
   CLinuxPowerSyscall::Register();
   m_lirc.reset(OPTIONALS::LircRegister());
+  m_libinput->Start();
 }
 
 CWinSystemRpi::~CWinSystemRpi()
diff --git a/xbmc/windowing/rpi/WinSystemRpi.h b/xbmc/windowing/rpi/WinSystemRpi.h
index b002426c6615..648f48516c39 100644
--- a/xbmc/windowing/rpi/WinSystemRpi.h
+++ b/xbmc/windowing/rpi/WinSystemRpi.h
@@ -21,6 +21,7 @@
 #pragma once
 
 #include "RPIUtils.h"
+#include "platform/linux/input/LibInputHandler.h"
 #include "platform/linux/OptionalsReg.h"
 #include "rendering/gles/RenderSystemGLES.h"
 #include "threads/CriticalSection.h"
@@ -67,4 +68,5 @@ class CWinSystemRpi : public CWinSystemBase
   CCriticalSection m_resourceSection;
   std::vector<IDispResource*> m_resources;
   std::unique_ptr<OPTIONALS::CLircContainer, OPTIONALS::delete_CLircContainer> m_lirc;
+  std::unique_ptr<CLibInputHandler> m_libinput;
 };
